AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnableLambdaIntegration:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  AdminCognitoDomainPrefix:
    Type: String
    Description: Cognito Hosted UI domain prefix (must be globally unique)
    Default: osakabaywheel-admin
  AdminHostedUICallbackURLs:
    Type: CommaDelimitedList
    Description: Hosted UI callback URLs
    Default: "https://app.osakabaywheel.com/admin/callback"
  AdminHostedUILogoutURLs:
    Type: CommaDelimitedList
    Description: Hosted UI logout URLs
    Default: "https://app.osakabaywheel.com/admin/logout"
  RequestAccessFunctionArn:
    Type: String
    Description: ARN of the RequestAccess Lambda function
    Default: ""
  VerifyAccessTokenFunctionArn:
    Type: String
    Description: ARN of the VerifyAccessToken Lambda function
    Default: ""
  GetPresignedUrlFunctionArn:
    Type: String
    Description: ARN of the GetPresignedUrl Lambda function
    Default: ""
  AdminApproveGuestFunctionArn:
    Type: String
    Description: ARN of the AdminApproveGuest Lambda function
    Default: ""

Conditions:
  DoLambdaIntegration: !Equals [ !Ref EnableLambdaIntegration, "true" ]

Resources:
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: obw-guest-checkin-api
      AuthenticationType: AWS_IAM
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            UserPoolId: !Ref AdminUserPool
            AwsRegion: !Ref AWS::Region

  GuestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: roomNumber
          AttributeType: S
        - AttributeName: guestId
          AttributeType: S
        - AttributeName: sessionTokenHash      # GSI用
          AttributeType: S
        - AttributeName: bookingId             # GSI用
          AttributeType: S
        - AttributeName: checkInDate           # GSI用
          AttributeType: S
        - AttributeName: checkOutDate          # GSI用
          AttributeType: S
        - AttributeName: approvalStatus        # GSI用
          AttributeType: S
        - AttributeName: sessionTokenExpiresAt # GSI用
          AttributeType: N
      KeySchema:
        - AttributeName: roomNumber
          KeyType: HASH
        - AttributeName: guestId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        # トークンでの検索・認証
        - IndexName: SessionTokenHashIndex
          KeySchema:
            - AttributeName: sessionTokenHash
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        # 予約単位で取得
        - IndexName: BookingIndex
          KeySchema:
            - AttributeName: bookingId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        # 部屋×チェックイン日で並べる（特定日を含む検索は Filter で checkOutDate >= :day）
        - IndexName: RoomCheckInIndex
          KeySchema:
            - AttributeName: roomNumber
              KeyType: HASH
            - AttributeName: checkInDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # チェックアウト日で並べるクエリ
        - IndexName: RoomCheckOutIndex
          KeySchema:
            - AttributeName: roomNumber
              KeyType: HASH
            - AttributeName: checkOutDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # 承認状態 × チェックイン日順（管理画面用）  
        - IndexName: ApprovalStatusCheckInIndex
          KeySchema:
            - AttributeName: approvalStatus
              KeyType: HASH
            - AttributeName: checkInDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # 承認状態 × 有効期限順（自動クリーンアップ用）
        - IndexName: ApprovalStatusExpiresIndex
          KeySchema:
            - AttributeName: approvalStatus
              KeyType: HASH
            - AttributeName: sessionTokenExpiresAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: pendingVerificationTtl
        Enabled: true
      TableName: obw-guest
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Guest @aws_cognito_user_pools @aws_iam {
          roomNumber: String!
          guestId: String!
          bookingId: String
          guestName: String!
          email: String
          address: String
          phone: String
          occupation: String
          nationality: String
          passportImageUrl: String
          checkInDate: AWSDate
          checkOutDate: AWSDate
          approvalStatus: String!
          promoConsent: Boolean
          isFamilyMember: Boolean
          sessionTokenExpiresAt: AWSTimestamp
          sessionTokenHash: String
          pendingVerificationTtl: AWSTimestamp
          createdAt: AWSDateTime
          updatedAt: AWSDateTime
          currentLocation: String
        }

        input CreateGuestInput {
          roomNumber: String!
          guestId: String!
          bookingId: String
          guestName: String!
          email: String!
          address: String!
          phone: String!
          occupation: String
          nationality: String!
          passportImageUrl: String
          checkInDate: AWSDate!
          checkOutDate: AWSDate!
          promoConsent: Boolean!
          isFamilyMember: Boolean
        }

        input UpdateGuestInput {
          roomNumber: String!
          guestId: String!
          bookingId: String
          guestName: String
          email: String
          address: String
          phone: String
          occupation: String
          nationality: String
          passportImageUrl: String
          checkInDate: AWSDate
          checkOutDate: AWSDate
          approvalStatus: String
          promoConsent: Boolean
          isFamilyMember: Boolean
          currentLocation: String
        }

        input RequestAccessInput {
          roomNumber: String!
          guestName: String!
          email: String!
          phone: String!
          contactChannel: String!
          lang: String
        }

        input GetPresignedUrlInput {
          filename: String!
          roomId: String!
          timestamp: String!
        }

        type RequestAccessResult {
          success: Boolean!
          guestId: String!
        }

        type VerifyTokenResult {
          success: Boolean!
          guest: Guest
        }

        type PresignedUrlResult @aws_cognito_user_pools @aws_iam {
          putUrl: String!
          getUrl: String!
          baseUrl: String!
        }

        type Mutation {
          createGuest(input: CreateGuestInput!): Guest
          updateGuest(input: UpdateGuestInput!): Guest @aws_cognito_user_pools @aws_iam
          requestAccess(input: RequestAccessInput!): RequestAccessResult
          verifyAccessToken(roomNumber: String!, guestId: String!, token: String!): VerifyTokenResult @aws_iam
          getPresignedUrl(input: GetPresignedUrlInput!): PresignedUrlResult @aws_cognito_user_pools @aws_iam
          adminApproveGuest(roomNumber: String!, guestId: String!): Guest @aws_cognito_user_pools
        }

        type Query {
          getGuest(roomNumber: String!, guestId: String!): Guest
          listGuestsByRoom(roomNumber: String!): [Guest] @aws_cognito_user_pools
          listGuestsByBooking(bookingId: String!): [Guest]
          listGuestsByApprovalStatus(approvalStatus: String!): [Guest] @aws_cognito_user_pools
        }

  GuestTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: obw-guest-checkin-table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref GuestTable
        AwsRegion: !Ref AWS::Region

  # AppSync が Lambda を呼び出すためのロール（Lambda Invoke許可）
  AppSyncLambdaRole:
    Condition: DoLambdaIntegration
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaForAppSync
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref RequestAccessFunctionArn
                  - !Ref VerifyAccessTokenFunctionArn
                  - !Ref GetPresignedUrlFunctionArn
                  - !Ref AdminApproveGuestFunctionArn

  RequestAccessLambdaDataSource:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: requestAccessLambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref RequestAccessFunctionArn

  VerifyAccessTokenLambdaDataSource:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: verifyAccessTokenLambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref VerifyAccessTokenFunctionArn

  AdminApproveGuestLambdaDataSource:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: adminApproveGuestLambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref AdminApproveGuestFunctionArn

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  CreateGuestResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createGuest
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "roomNumber": $util.dynamodb.toDynamoDBJson($ctx.args.input.roomNumber),
            "guestId": $util.dynamodb.toDynamoDBJson($ctx.args.input.guestId)
          },
          "attributeValues": {
            "guestId": $util.dynamodb.toDynamoDBJson($ctx.args.input.guestId),
            "bookingId": $util.dynamodb.toDynamoDBJson($ctx.args.input.bookingId),
            "guestName": $util.dynamodb.toDynamoDBJson($ctx.args.input.guestName),
            "email": $util.dynamodb.toDynamoDBJson($ctx.args.input.email),
            "address": $util.dynamodb.toDynamoDBJson($ctx.args.input.address),
            "phone": $util.dynamodb.toDynamoDBJson($ctx.args.input.phone),
            "occupation": $util.dynamodb.toDynamoDBJson($ctx.args.input.occupation),
            "nationality": $util.dynamodb.toDynamoDBJson($ctx.args.input.nationality),
            "passportImageUrl": $util.dynamodb.toDynamoDBJson($ctx.args.input.passportImageUrl),
            "checkInDate": $util.dynamodb.toDynamoDBJson($ctx.args.input.checkInDate),
            "checkOutDate": $util.dynamodb.toDynamoDBJson($ctx.args.input.checkOutDate),
            "approvalStatus": $util.dynamodb.toDynamoDBJson("pendingVerification"),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601()),
            "updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601()),
            "promoConsent": $util.dynamodb.toDynamoDBJson($ctx.args.input.promoConsent),
            "isFamilyMember": $util.dynamodb.toDynamoDBJson($util.defaultIfNull($ctx.args.input.isFamilyMember, false))
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  UpdateGuestResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateGuest
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        #set($setExp = "SET #updatedAt = :updatedAt")
        #set($removeExp = "")
        #set($names = { "#updatedAt": "updatedAt" })
        #set($values = { ":updatedAt": { "S": "$util.time.nowISO8601()" } })

        ## 既存のフィールド処理...
        #if(!$util.isNullOrEmpty($ctx.args.input.bookingId))
          #set($setExp = $setExp + ", #bookingId = :bookingId")
          $util.qr($names.put("#bookingId","bookingId"))
          $util.qr($values.put(":bookingId", { "S": "$ctx.args.input.bookingId" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.guestName))
          #set($setExp = $setExp + ", #guestName = :guestName")
          $util.qr($names.put("#guestName","guestName"))
          $util.qr($values.put(":guestName", { "S": "$ctx.args.input.guestName" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.email))
          #set($setExp = $setExp + ", #email = :email")
          $util.qr($names.put("#email","email"))
          $util.qr($values.put(":email", { "S": "$ctx.args.input.email" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.address))
          #set($setExp = $setExp + ", #address = :address")
          $util.qr($names.put("#address","address"))
          $util.qr($values.put(":address", { "S": "$ctx.args.input.address" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.phone))
          #set($setExp = $setExp + ", #phone = :phone")
          $util.qr($names.put("#phone","phone"))
          $util.qr($values.put(":phone", { "S": "$ctx.args.input.phone" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.occupation))
          #set($setExp = $setExp + ", #occupation = :occupation")
          $util.qr($names.put("#occupation","occupation"))
          $util.qr($values.put(":occupation", { "S": "$ctx.args.input.occupation" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.nationality))
          #set($setExp = $setExp + ", #nationality = :nationality")
          $util.qr($names.put("#nationality","nationality"))
          $util.qr($values.put(":nationality", { "S": "$ctx.args.input.nationality" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.passportImageUrl))
          #set($setExp = $setExp + ", #passportImageUrl = :passportImageUrl")
          $util.qr($names.put("#passportImageUrl","passportImageUrl"))
          $util.qr($values.put(":passportImageUrl", { "S": "$ctx.args.input.passportImageUrl" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.checkInDate))
          #set($setExp = $setExp + ", #checkInDate = :checkInDate")
          $util.qr($names.put("#checkInDate","checkInDate"))
          $util.qr($values.put(":checkInDate", { "S": "$ctx.args.input.checkInDate" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.checkOutDate))
          #set($setExp = $setExp + ", #checkOutDate = :checkOutDate")
          $util.qr($names.put("#checkOutDate","checkOutDate"))
          $util.qr($values.put(":checkOutDate", { "S": "$ctx.args.input.checkOutDate" }))
        #end
        #if(!$util.isNullOrEmpty($ctx.args.input.approvalStatus))
          #set($setExp = $setExp + ", #approvalStatus = :approvalStatus")
          $util.qr($names.put("#approvalStatus","approvalStatus"))
          $util.qr($values.put(":approvalStatus", { "S": "$ctx.args.input.approvalStatus" }))
        #end

        ## Booleans
        #if(!$util.isNull($ctx.args.input.promoConsent))
          #set($setExp = $setExp + ", #promoConsent = :promoConsent")
          $util.qr($names.put("#promoConsent","promoConsent"))
          $util.qr($values.put(":promoConsent", { "BOOL": $ctx.args.input.promoConsent }))
        #end

        #if(!$util.isNull($ctx.args.input.isFamilyMember))
          #set($setExp = $setExp + ", #isFamilyMember = :isFamilyMember")
          $util.qr($names.put("#isFamilyMember","isFamilyMember"))
          $util.qr($values.put(":isFamilyMember", { "BOOL": $ctx.args.input.isFamilyMember }))
        #end

        ## currentLocation の処理
        #if(!$util.isNullOrEmpty($ctx.args.input.currentLocation))
          #set($setExp = $setExp + ", #currentLocation = :currentLocation")
          $util.qr($names.put("#currentLocation","currentLocation"))
          $util.qr($values.put(":currentLocation", { "S": "$ctx.args.input.currentLocation" }))
        #end

        ## 最終的な UpdateExpression を構築
        #if($removeExp != "")
          #set($finalExp = "$setExp $removeExp")
        #else
          #set($finalExp = $setExp)
        #end

        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "roomNumber": { "S": "$ctx.args.input.roomNumber" },
            "guestId": { "S": "$ctx.args.input.guestId" }
          },
          "update": {
            "expression": "$finalExp",
            "expressionNames": $util.toJson($names),
            "expressionValues": $util.toJson($values)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  GetGuestResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getGuest
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "roomNumber": $util.dynamodb.toDynamoDBJson($ctx.args.roomNumber),
            "guestId": $util.dynamodb.toDynamoDBJson($ctx.args.guestId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ListGuestsByRoomResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listGuestsByRoom
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "roomNumber = :roomNumber",
            "expressionValues": {
              ":roomNumber": $util.dynamodb.toDynamoDBJson($ctx.args.roomNumber)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  ListGuestsByBookingResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listGuestsByBooking
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "index": "BookingIndex",
          "query": {
            "expression": "bookingId = :b",
            "expressionValues": {
              ":b": $util.dynamodb.toDynamoDBJson($ctx.args.bookingId)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  ListGuestsByApprovalStatusResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GuestTableDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listGuestsByApprovalStatus
      DataSourceName: obw-guest-checkin-table
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "index": "ApprovalStatusCheckInIndex",
          "query": {
            "expression": "approvalStatus = :status",
            "expressionValues": {
              ":status": $util.dynamodb.toDynamoDBJson($ctx.args.approvalStatus)
            }
          },
          "scanIndexForward": true
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${AdminUserPool}
          ClientId: !Ref AdminUserPoolClient

  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: AppSyncPublicAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource:
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Query/fields/getGuest
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Query/fields/listGuestsByBooking
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Mutation/fields/verifyAccessToken
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Mutation/fields/getPresignedUrl
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Mutation/fields/updateGuest
                  - !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApi.ApiId}/types/Mutation/fields/requestAccess

  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies: []

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn

  # Admin Cognito resources
  AdminUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: obw-admin-userpool
      MfaConfiguration: 'OFF'
      DeletionProtection: INACTIVE
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 11
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameConfiguration:
        CaseSensitive: false

  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminUserPool
      ClientName: obw-admin-app-client
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref AdminHostedUICallbackURLs
      LogoutURLs: !Ref AdminHostedUILogoutURLs
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true

  AdminUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref AdminCognitoDomainPrefix
      UserPoolId: !Ref AdminUserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref AdminUserPool
      Username: obw-admin

  RequestAccessResolver:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - RequestAccessLambdaDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: requestAccess
      DataSourceName: !GetAtt RequestAccessLambdaDataSource.Name

  VerifyAccessTokenResolver:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - VerifyAccessTokenLambdaDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: verifyAccessToken
      DataSourceName: !GetAtt VerifyAccessTokenLambdaDataSource.Name

  GetPresignedUrlLambdaDataSource:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: getPresignedUrlLambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref GetPresignedUrlFunctionArn

  GetPresignedUrlResolver:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - GetPresignedUrlLambdaDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: getPresignedUrl
      DataSourceName: getPresignedUrlLambda
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context)
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  AdminApproveGuestResolver:
    Condition: DoLambdaIntegration
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AppSyncSchema
      - AdminApproveGuestLambdaDataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: adminApproveGuest
      DataSourceName: !GetAtt AdminApproveGuestLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context)
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

Outputs:
  ApiEndpoint:
    Description: "AppSync API Endpoint"
    Value: !GetAtt AppSyncApi.GraphQLUrl
  AppSyncApiId:
    Description: "AppSync API ID"
    Value: !GetAtt AppSyncApi.ApiId
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool ID"
    Value: !Ref IdentityPool
  AdminUserPoolId:
    Description: "Admin Cognito User Pool ID"
    Value: !Ref AdminUserPool
  AdminUserPoolClientId:
    Description: "Admin Cognito User Pool Client ID"
    Value: !Ref AdminUserPoolClient
  AdminUserPoolDomainPrefix:
    Description: "Admin Cognito Hosted UI domain prefix"
    Value: !Ref AdminCognitoDomainPrefix
  AdminHostedUICallbackURL:
    Description: "First Hosted UI callback URL"
    Value: !Select [0, !Ref AdminHostedUICallbackURLs]
  AdminHostedUILogoutURL:
    Description: "First Hosted UI logout URL"
    Value: !Select [0, !Ref AdminHostedUILogoutURLs]
  GuestTableName:
    Description: "DynamoDB guest table name"
    Value: !Ref GuestTable
    Export:
      Name: Obw-GuestTableName
  GuestTableStreamArn:
    Description: "DynamoDB Stream ARN for GuestTable"
    Value: !GetAtt GuestTable.StreamArn
    Export:
      Name: Obw-GuestTableStreamArn