AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  obwWebApp
  AWS SAM/CloudFormation Template for obwWebApp

Globals:
  Function:
    Timeout: 30
    Runtime: python3.13
    Architectures:
      - x86_64

Parameters:
  OpenAiApiKey:
    Type: String
    NoEcho: true
  OpenAiVectorStoreId:
    Type: String
    Description: "OpenAI Vector Store ID"
    NoEcho: true
  TwilioAccountSid:
    Type: String
    Description: "Twilio Account SID"
    NoEcho: true
  TwilioAuthToken:
    Type: String
    Description: "Twilio Auth Token"
    NoEcho: true
  AiProcessingLambdaFunctionName:
    Type: String
    Description: "Name of the AI Processing Lambda function"
    Default: "obw-ai-processing-function"
  # ImmediateResponseFunction の Function URL が Outputs から取得される場合、
  # 最初は空文字をデフォルトにすることでエラーを防ぎ、後続のパイプラインで上書き
  ImmediateResponseFunctionUrlParam:
    Type: String
    Description: "Function URL for Immediate Response, provided from Outputs"
    Default: ""
  GuestTableName:
    Type: String
    Description: "DynamoDB guest table name (from AppSync stack)"
  TelegramBotTokenParam:
    Type: String
    NoEcho: true
  TelegramChatIdParam:
    Type: String
    NoEcho: true
  SendGridApiKey:
    Type: String
    Description: "SendGrid API Key"
    NoEcho: true

Resources:
  # TwilioのLambda用レイヤー
  LayerForObw:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: layer_for_obw
      Description: Common libraries for obwWebApp (Twilio, OpenAI, lingual-manager, etc.)
      ContentUri: layers/
      CompatibleRuntimes:
        - python3.13
      CompatibleArchitectures:
        - x86_64
      LicenseInfo: 'Available under the MIT license.'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: x86_64

  # TwilioのLambda1
  ImmediateResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref LayerForObw
      FunctionName: obw-immediate-response-function
      MemorySize: 128
      CodeUri: lambda_functions/immediate-response/
      Handler: lambda_handler_immediate_response.lambda_handler
      SnapStart:
        ApplyOn: PublishedVersions
      AutoPublishAlias: live
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins: [ "*" ]
          AllowMethods: [ "POST" ]
          AllowHeaders: [ "Content-Type" ]
      Environment:
        Variables:
          AI_PROCESSING_LAMBDA_NAME: !Ref AiProcessingLambdaFunctionName
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref AiProcessingLambdaFunctionName

  # TwilioのLambda2
  AiProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref LayerForObw
      FunctionName: !Ref AiProcessingLambdaFunctionName
      MemorySize: 1024
      CodeUri: lambda_functions/ai_processing/
      Handler: lambda_handler_ai_processing.lambda_handler
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAiApiKey
          OPENAI_VECTOR_STORE_ID: !Ref OpenAiVectorStoreId
          TWILIO_ACCOUNT_SID: !Ref TwilioAccountSid
          TWILIO_AUTH_TOKEN: !Ref TwilioAuthToken
          LAMBDA1_FUNCTION_URL: !Ref ImmediateResponseFunctionUrlParam

  # S3バケットの作成
  PassportUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "privacy-obw-id-upload"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - http://localhost:5173 # テスト終わったら削除
              - https://app.osakabaywheel.com
            AllowedMethods:
              - PUT
              - POST
              - GET
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - ETag
            MaxAge: 3000

  # 署名付きURL用Lambda
  GetPresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: obw-get-presigned-url-function
      MemorySize: 128
      CodeUri: lambda_functions/get_presigned_url/
      Handler: lambda_handler_get_presigned_url.lambda_handler
      Runtime: python3.13
      Timeout: 30
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref PassportUploadBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref PassportUploadBucket
        - S3ReadPolicy:
            BucketName: !Ref PassportUploadBucket

  # AI Chat用のLambda
  LayerForResponseAPI:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: external/ServerlessResponseAPI/layer
      CompatibleRuntimes:
        - nodejs22.x
    Metadata:
      BuildMethod: nodejs22.x
      BuildArchitecture: x86_64

  ResponseApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: obw-response-api-function
      CodeUri: external/ServerlessResponseAPI/dist/lambda_function/
      Handler: chat_handler.handler
      Runtime: nodejs22.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAiApiKey
          OPENAI_VECTOR_STORE_ID: !Ref OpenAiVectorStoreId
      Layers:
        - !Ref LayerForResponseAPI

  ChatFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt ResponseApiFunction.Arn
      AuthType: NONE
      InvokeMode: RESPONSE_STREAM
      Cors:
        AllowOrigins:
          - http://localhost:5173 # テスト終わったら削除
          - https://app.osakabaywheel.com
        AllowHeaders:
          - content-type
        AllowMethods:
          - POST
        AllowCredentials: false

  RequestAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: request-access-function
      Handler: lambda_handler_request_access.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 128
      CodeUri: lambda_functions/request_access/
      Environment:
        Variables:
          TABLE_NAME: !Ref GuestTableName
          MAX_TOKEN_LIFETIME_HOURS: "1"
          SENDGRID_API_KEY: !Ref SendGridApiKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GuestTableName
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: "*"

  VerifyAccessTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: verify-access-token-function
      Handler: lambda_handler_verify_access.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 128
      CodeUri: lambda_functions/verify_access/
      Environment:
        Variables:
          TABLE_NAME: !Ref GuestTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GuestTableName
        - DynamoDBWritePolicy:
            TableName: !Ref GuestTableName

  # 管理者への通知Lambda
  NotifyAdminOnPendingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: obw-notify-admin-on-pending
      CodeUri: lambda_functions/notify_admin/
      Handler: lambda_handler_notify_admin.handler
      Runtime: python3.13
      MemorySize: 256
      Environment:
        Variables:
          ADMIN_BASE_URL: "https://app.osakabaywheel.com/admin"
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotTokenParam
          TELEGRAM_CHAT_ID: !Ref TelegramChatIdParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaDynamoDBExecutionRole
      Events:
        FromGuestTableStream:
          Type: DynamoDB
          Properties:
            Stream: !ImportValue Obw-GuestTableStreamArn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
            StartingPosition: LATEST
            FilterCriteria:
              Filters:
                - Pattern: |
                    {
                      "eventName": ["INSERT", "MODIFY"],
                      "dynamodb": {
                        "NewImage": {
                          "approvalStatus": {
                            "S": ["pending"]
                          }
                        }
                      }
                    }

  AdminApproveGuestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: admin-approve-guest-function
      CodeUri: lambda_functions/admin_approve_guest/
      Handler: lambda_handler_admin_approve_guest.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref GuestTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GuestTableName
        - DynamoDBWritePolicy:
            TableName: !Ref GuestTableName

Outputs:
  ImmediateResponseFunctionArn:
    Description: "ARN for Immediate Response function"
    Value: !GetAtt ImmediateResponseFunction.Arn
  AiProcessingFunctionArn:
    Description: "ARN for AI Processing function"
    Value: !GetAtt AiProcessingFunction.Arn
  ChatFunctionUrl:
    Description: "Function URL for ResponseApiFunction"
    Value: !GetAtt ChatFunctionUrl.FunctionUrl
  PassportUploadBucketName:
    Description: "S3 bucket for passport uploads"
    Value: !Ref PassportUploadBucket
  RequestAccessFunctionArn:
    Description: "ARN for request-access Lambda"
    Value: !GetAtt RequestAccessFunction.Arn
    Export:
      Name: Obw-RequestAccessFunctionArn
  VerifyAccessTokenFunctionArn:
    Description: "ARN for verify-access-token Lambda"
    Value: !GetAtt VerifyAccessTokenFunction.Arn
    Export:
      Name: Obw-VerifyAccessTokenFunctionArn
  GetPresignedUrlFunctionArn:
    Description: "ARN for GetPresignedUrl Lambda"
    Value: !GetAtt GetPresignedUrlFunction.Arn
    Export:
      Name: Obw-GetPresignedUrlFunctionArn
  AdminApproveGuestFunctionArn:
    Description: "ARN for admin-approve-guest Lambda"
    Value: !GetAtt AdminApproveGuestFunction.Arn
    Export:
      Name: Obw-AdminApproveGuestFunctionArn