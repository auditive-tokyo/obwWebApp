name: Deploy Lambda Functions

on:
  push:
    branches: [main, feature/*]
      - 'lambda_functions/admin_approve_guest/**'
      - 'lambda_functions/ai_processing/**'
      - 'lambda_functions/get_presigned_url/**'
      - 'lambda_functions/immediate-response/**'
      - 'lambda_functions/notify_admin/**'
      - 'lambda_functions/request_access/**'
      - 'lambda_functions/verify_access/**'
      - 'layers/**'
      - '.github/workflows/lambda-deploy.yml'
      - 'template.yaml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    concurrency:
      group: obw-appsync-stack
      cancel-in-progress: false

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout ServerlessResponseAPI repository
        uses: actions/checkout@v4
        with:
          repository: auditive-tokyo/ServerlessResponseAPI
          ref: OBW-Customized
          path: external/ServerlessResponseAPI

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build ServerlessResponseAPI Lambda (TypeScript)
        run: |
          cd external/ServerlessResponseAPI
          npm install
          npm run build

      - name: Build ServerlessResponseAPI Layer (Node.js)
        run: |
          cd external/ServerlessResponseAPI/layer
          npm install

      - name: Install AWS SAM CLI
        run: pip install aws-sam-cli

      - name: Ensure AppSync base stack exists (EnableLambdaIntegration=false)
        run: |
          set -e
          if ! aws cloudformation describe-stacks --stack-name obw-appsync-stack >/dev/null 2>&1; then
            echo "obw-appsync-stack not found. Deploying base stack..."
            aws cloudformation deploy \
              --template-file obw_react_app/infrastructure/cloudformation.yaml \
              --stack-name obw-appsync-stack \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides EnableLambdaIntegration=false \
              --no-fail-on-empty-changeset
          else
            echo "obw-appsync-stack exists. Skipping base deploy."
          fi

      - name: Force disable Lambda integration in AppSync (idempotent)
        run: |
          aws cloudformation deploy \
            --template-file obw_react_app/infrastructure/cloudformation.yaml \
            --stack-name obw-appsync-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides EnableLambdaIntegration=false \
            --no-fail-on-empty-changeset

      - name: Get GuestTableName from CloudFormation (Outputs or Exports)
        id: get_guest_table_name
        run: |
          set -e
          GUEST_TABLE_NAME=$(aws cloudformation describe-stacks \
            --stack-name obw-appsync-stack \
            --query "Stacks[0].Outputs[?OutputKey=='GuestTableName'].OutputValue" \
            --output text || true)

          if [ -z "$GUEST_TABLE_NAME" ] || [ "$GUEST_TABLE_NAME" = "None" ]; then
            echo "Outputs not found. Trying Exports (Obw-GuestTableName)..."
            GUEST_TABLE_NAME=$(aws cloudformation list-exports \
              --query "Exports[?Name=='Obw-GuestTableName'].Value" \
              --output text || true)
          fi

          if [ -z "$GUEST_TABLE_NAME" ] || [ "$GUEST_TABLE_NAME" = "None" ]; then
            echo "GuestTableName not found. Ensure cloudformation.yaml has Outputs.GuestTableName and stack deployed." >&2
            exit 1
          fi

          echo "GuestTableName is $GUEST_TABLE_NAME"
          echo "guest_table_name=$GUEST_TABLE_NAME" >> $GITHUB_OUTPUT

      - name: SAM Build
        run: sam build --use-container

      - name: SAM Deploy
        env:
          OPENAI_API_KEY_FROM_SECRET: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_VECTOR_STORE_ID_FROM_SECRET: ${{ secrets.OPENAI_VECTOR_STORE_ID }}
          TWILIO_ACCOUNT_SID_FROM_SECRET: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN_FROM_SECRET: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TELEGRAM_BOT_TOKEN_FROM_SECRET: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID_FROM_SECRET: ${{ secrets.TELEGRAM_CHAT_ID }}
          SENDGRID_API_KEY_FROM_SECRET: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          sam deploy \
            --stack-name obw-lambda-functions \
            --capabilities CAPABILITY_IAM \
            --resolve-s3 \
            --no-confirm-changeset \
            --parameter-overrides \
              GuestTableName="${{ steps.get_guest_table_name.outputs.guest_table_name }}" \
              OpenAiApiKey="$OPENAI_API_KEY_FROM_SECRET" \
              OpenAiVectorStoreId="$OPENAI_VECTOR_STORE_ID_FROM_SECRET" \
              TwilioAccountSid="$TWILIO_ACCOUNT_SID_FROM_SECRET" \
              TwilioAuthToken="$TWILIO_AUTH_TOKEN_FROM_SECRET" \
              TelegramBotTokenParam="$TELEGRAM_BOT_TOKEN_FROM_SECRET" \
              TelegramChatIdParam="$TELEGRAM_CHAT_ID_FROM_SECRET" \
              SendGridApiKey="$SENDGRID_API_KEY_FROM_SECRET" \
            --no-fail-on-empty-changeset

      - name: Wait for Lambda exports (Function ARNs)
        run: |
          set -e
          for i in {1..15}; do
            COUNT=$(aws cloudformation list-exports \
              --query "length(Exports[?Name=='Obw-RequestAccessFunctionArn' || Name=='Obw-VerifyAccessTokenFunctionArn' || Name=='Obw-GetPresignedUrlFunctionArn' || Name=='Obw-AdminApproveGuestFunctionArn'])" \
              --output text || echo 0)
            if [ "$COUNT" -ge 4 ]; then
              echo "All Lambda exports found."
              break
            fi
            echo "Waiting for Lambda exports... ($i/15)"
            sleep 6
          done

      - name: Wait until AppSync stack is idle
        run: |
          for i in {1..20}; do
            STATUS=$(aws cloudformation describe-stacks --stack-name obw-appsync-stack --query "Stacks[0].StackStatus" --output text || echo "")
            echo "AppSync stack status: $STATUS"
            if [[ "$STATUS" != *"_IN_PROGRESS" ]]; then break; fi
            sleep 9
          done

      - name: Enable Lambda integration in AppSync
        run: |
          aws cloudformation deploy \
            --template-file obw_react_app/infrastructure/cloudformation.yaml \
            --stack-name obw-appsync-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides EnableLambdaIntegration=true \
            --no-fail-on-empty-changeset

      - name: Get Immediate Response Function URL from Alias
        id: get_function_url
        run: |
          # エイリアス "live" 経由の Function URL を取得します
          FUNCTION_URL=$(aws lambda get-function-url-config --function-name obw-immediate-response-function:live --query 'FunctionUrl' --output text)
          echo "Function URL is: ${FUNCTION_URL}"
          echo "function_url=${FUNCTION_URL}" >> $GITHUB_OUTPUT
      
      - name: Update CloudFormation Stack with Function URL 
        env:
          OPENAI_API_KEY_FROM_SECRET: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_VECTOR_STORE_ID_FROM_SECRET: ${{ secrets.OPENAI_VECTOR_STORE_ID }}
          TWILIO_ACCOUNT_SID_FROM_SECRET: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN_FROM_SECRET: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TELEGRAM_BOT_TOKEN_FROM_SECRET: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID_FROM_SECRET: ${{ secrets.TELEGRAM_CHAT_ID }}
          SENDGRID_API_KEY_FROM_SECRET: ${{ secrets.SENDGRID_API_KEY }}  # ← 追加
        run: |
          echo "Updating stack with ImmediateResponseFunctionUrlParam=${{ steps.get_function_url.outputs.function_url }}"

          # sam deploy を再度実行して、Function URL をパラメータとして渡す
          sam deploy \
            --stack-name obw-lambda-functions \
            --capabilities CAPABILITY_IAM \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              ImmediateResponseFunctionUrlParam="${{ steps.get_function_url.outputs.function_url }}" \
              OpenAiApiKey="$OPENAI_API_KEY_FROM_SECRET" \
              OpenAiVectorStoreId="$OPENAI_VECTOR_STORE_ID_FROM_SECRET" \
              TwilioAccountSid="$TWILIO_ACCOUNT_SID_FROM_SECRET" \
              TwilioAuthToken="$TWILIO_AUTH_TOKEN_FROM_SECRET" \
              TelegramBotTokenParam="$TELEGRAM_BOT_TOKEN_FROM_SECRET" \
              TelegramChatIdParam="$TELEGRAM_CHAT_ID_FROM_SECRET" \
              SendGridApiKey="$SENDGRID_API_KEY_FROM_SECRET"

          aws cloudformation wait stack-update-complete --stack-name obw-lambda-functions

      - name: Clean up old Lambda versions
        run: |
          # ImmediateResponseFunction の古いバージョンをクリーンアップ
          IMMEDIATE_RESPONSE_FUNCTION_NAME="obw-immediate-response-function"
          echo "Cleaning up old versions for $IMMEDIATE_RESPONSE_FUNCTION_NAME"
          ALIASED_VERSION_IR=$(aws lambda get-alias --function-name "$IMMEDIATE_RESPONSE_FUNCTION_NAME" --name live --query 'FunctionVersion' --output text 2>/dev/null)

          if [ -z "$ALIASED_VERSION_IR" ]; then
            echo "Could not get 'live' alias version for $IMMEDIATE_RESPONSE_FUNCTION_NAME. Skipping cleanup."
          else
            echo "Version for 'live' alias of $IMMEDIATE_RESPONSE_FUNCTION_NAME: $ALIASED_VERSION_IR"
            # $LATEST ではない、かつエイリアスされていないバージョンをリストアップして削除
            aws lambda list-versions-by-function --function-name "$IMMEDIATE_RESPONSE_FUNCTION_NAME" --query "Versions[?Version!='\$LATEST'].Version" --output json | jq -r '.[]' | while read VERSION_TO_CHECK; do
              if [ "$VERSION_TO_CHECK" != "$ALIASED_VERSION_IR" ]; then
                echo "Deleting old version: $VERSION_TO_CHECK for $IMMEDIATE_RESPONSE_FUNCTION_NAME"
                aws lambda delete-function --function-name "$IMMEDIATE_RESPONSE_FUNCTION_NAME" --qualifier "$VERSION_TO_CHECK" || echo "Warning: Failed to delete version $VERSION_TO_CHECK for $IMMEDIATE_RESPONSE_FUNCTION_NAME. It might have been already deleted or is in use by another alias."
              else
                echo "Keeping 'live' aliased version: $VERSION_TO_CHECK for $IMMEDIATE_RESPONSE_FUNCTION_NAME"
              fi
            done
          fi

          # Lambda レイヤーの古いバージョンをクリーンアップ
          # CloudFormationスタックからレイヤー情報を取得
          echo "Getting Lambda Layer information from CloudFormation stack"
          LAYER_RESOURCES=$(aws cloudformation describe-stack-resources --stack-name obw-lambda-functions --query "StackResources[?ResourceType=='AWS::Lambda::LayerVersion'].PhysicalResourceId" --output text)

          for LAYER_ARN in $LAYER_RESOURCES; do
            # ARNからレイヤー名を抽出
            LAYER_NAME=$(echo $LAYER_ARN | cut -d: -f7)
            echo "Found layer: $LAYER_NAME"
            
            # レイヤーの全バージョンを取得
            LAYER_VERSIONS=$(aws lambda list-layer-versions --layer-name "$LAYER_NAME" --query 'LayerVersions[*].Version' --output json)
            echo "All layer versions: $LAYER_VERSIONS"

            # 最新バージョンを取得（バージョン番号が最も大きいもの）
            LATEST_LAYER_VERSION=$(echo $LAYER_VERSIONS | jq 'max')
            echo "Latest layer version: $LATEST_LAYER_VERSION"

            # 最新バージョン以外を削除
            if [ ! -z "$LATEST_LAYER_VERSION" ] && [ "$LATEST_LAYER_VERSION" != "null" ]; then
              echo $LAYER_VERSIONS | jq '.[]' | while read VERSION_TO_CHECK; do
                if [ "$VERSION_TO_CHECK" != "$LATEST_LAYER_VERSION" ]; then
                  echo "Deleting old layer version: $VERSION_TO_CHECK for $LAYER_NAME"
                  aws lambda delete-layer-version --layer-name "$LAYER_NAME" --version-number "$VERSION_TO_CHECK" || echo "Warning: Failed to delete layer version $VERSION_TO_CHECK for $LAYER_NAME."
                else
                  echo "Keeping latest version: $VERSION_TO_CHECK for $LAYER_NAME"
                fi
              done
            else
              echo "Could not determine latest version for layer $LAYER_NAME. Skipping cleanup."
            fi
          done

          # レイヤーが見つからない場合は警告表示
          if [ -z "$LAYER_RESOURCES" ]; then
            echo "Warning: No Lambda Layers found in CloudFormation stack. Please check your CloudFormation template and deployment."
          fi